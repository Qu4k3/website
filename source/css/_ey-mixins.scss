//
// Mixins
// --------------------------------------------------


// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}
// Center-align a block level element
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// TYPOGRAPHY

@mixin helvetica {
	font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

@mixin AvenirLight {
	font-family: $avenirFamily;
  font-weight: 200;
}

@mixin AvenirBook {
  font-family: $avenirFamily;
  font-weight: 300;
}

@mixin AvenirRoman {
  font-family: $avenirFamily;
  font-weight: 400;
}

@mixin AvenirMedium {
  font-family: $avenirFamily;
    font-weight: 500;
}

@mixin AvenirHeavy {
	font-family: $avenirFamily;
  font-weight: 800;
}

@mixin AvenirBlack {
	font-family: $avenirFamily;
  font-weight: 900;
}

@mixin Avenir {
  font-family: $avenirFamily;
    /* you'll need to declare a valid font-weight value along with this when used */
}

@mixin textLayout ($textSize: $baseFontSize, $lineHeight: $baseLineHeight) {

	$paddingValue: ($textSize * $lineHeight) / 2; //get the line height of the element and divide it in 2 for top and bottom padding

	$paddingValue: ($paddingValue / 1em); // convert to unitless number
	$paddingValue: ($paddingValue*16) + 0px; // convert to pixels
	$paddingValue: ($paddingValue / 1px); // convert to unitless number
	@if $paddingValue < 16 {
		$paddingValue: ($paddingValue/16) + 0em;
	}
	@if $paddingValue > 16 {
		$paddingValue: (16/$paddingValue) + 0em;
	} //convert back to ems

	padding-top: $paddingValue;
	padding-bottom: $paddingValue;
	line-height: $lineHeight;
	font-size: $textSize;
}


// BORDER RADIUS

@mixin borderRadius($topleft :4px, $topright: 4px, $bottomright: 4px, $bottomleft: 4px) {
		-moz-border-radius-topleft: $topleft;
       -moz-border-radius-topright: $topright;
    -moz-border-radius-bottomright: $bottomright;
     -moz-border-radius-bottomleft: $bottomleft;
    		 -webkit-border-radius: $topleft $topright $bottomright $bottomleft;
    				 border-radius: $topleft $topright $bottomright $bottomleft;
}

// BOX SHADOWS

	// These can be used as their defaults, or modified by using with a string of properties
	// e.g. Default:    @include boxShadowRegular;
	// e.g. Custom:     @include boxShadowRegular(0, 1px, 4px, 255, 0.5, inset);

@mixin boxShadowLarge( $left:0, $top:0px, $blur:5px, $color: 170, $opacity:0.3, $inset:"") {
  -webkit-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  -moz-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  box-shadow:$left $top $blur rgba($color, $color, $color, $opacity) #{$inset};
}

@mixin boxShadowRegular( $left:0, $top:0px, $blur:3px, $color: 170, $opacity:0.3, $inset:"") {
  -webkit-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  -moz-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  box-shadow:$left $top $blur rgba($color, $color, $color, $opacity) #{$inset};
}

@mixin boxShadowSmall( $left:0, $top:0px, $blur:1px, $color: 170, $opacity:0.4, $inset:"") {
  -webkit-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  -moz-box-shadow:$left $top  $blur rgba($color, $color, $color, $opacity) #{$inset};
  box-shadow:$left $top $blur rgba($color, $color, $color, $opacity) #{$inset};
}


// BUTTONS

@mixin btnHoverFX {
	-webkit-transition: all 0.3s linear;
	-moz-transition: all 0.3s linear;
	-o-transition: all 0.3s linear;
	transition: all 0.3s linear;
}

@mixin btnShade($color) {
	@include gradientColor($color);
	background-color: $color;
    @include boxShadowSmall(0,2px,0,0,0.1);
}

@mixin btnHover($color) {
	text-decoration: none;
  color: white;
  @include gradientColor(darken($color, 5%));
  background-color: darken($color, 5%);
  @include boxShadowSmall(0,2px,0,0,0.25);
}

@mixin btnActive($color) {
	text-decoration: none;
	background-color: darken($color, 3.5%);
    outline: none;
    text-shadow: 0 -1px 1px rgba(100,100,100,0.25);
    outline: 0;
	position: relative;
	top: 1px;
	@include gradientColor($color, 3.5%, 3.5%,99%, 50%, 1%);
	@include boxShadowSmall(0,2px,4px,0,0.3, inset);
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
}

// GRADIENTS

@mixin gradientColor(
		$color:white, $darken:3%, $lighten:3%,
		$step1:1%, $step2:50%, $step3:99%
	) {
 	background-image: linear-gradient(bottom, darken($color, $darken) $step1, $color $step2, lighten($color, $lighten) $step3 );
 	background-image: -o-linear-gradient(bottom, darken($color, $darken) $step1, $color $step2, lighten($color, $lighten) $step3 );
 	background-image: -moz-linear-gradient(bottom, darken($color, $darken) $step1, $color $step2, lighten($color, $lighten) $step3 );
 	background-image: -webkit-linear-gradient(bottom, darken($color, $darken) $step1, $color $step2, lighten($color, $lighten) $step3 );
 	background-image: -ms-linear-gradient(bottom, darken($color, $darken) $step1, $color $step2, lighten($color, $lighten) $step3 );
 	background-image: -webkit-gradient(
 	  linear, left bottom, left top,
 	  color-stop(($step1), darken($color, $darken) ),
 	  color-stop(($step2), $color ),
 	  color-stop(($step3), lighten($color, $lighten) )
 	);
 }

@mixin gradientBG($color1, $color2) {
 	background-color: $color1;
 	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#{$color1}, endColorstr=#{$color2});
 	background-image: -moz-linear-gradient(center top, $color1, $color2);
 	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($color1), to($color2));
}


// BOX SIZING

@mixin box-sizing ($sizing: border-box) {
 	-webkit-box-sizing: $sizing;
 	-khtml-box-sizing: $sizing;
 	-moz-box-sizing: $sizing;
 	-ms-box-sizing: $sizing;
 	box-sizing: $sizing;
}

// THEME STRIPE

@mixin themeStripe {
	border-top: 3px solid $darkRed;
}

@mixin barberstripe {
  background-image: url('../img/activity-tile-24.gif') !important;
  background-repeat: repeat;
  background-position: 0 0;
  filter: none;
}

@mixin keyframes( $animationName )
{
    @-webkit-keyframes $animationName {
        @content;
    }
    @-moz-keyframes $animationName {
        @content;
    }
    @-o-keyframes $animationName {
        @content;
    }
    @-ms-keyframes $animationName {
        @content;
    }
    @keyframes $animationName {
        @content;
    }
}


// TEXT MODIFIERS

@mixin blockText {
	font-weight: 900;
	text-transform: uppercase;
}

	.blocktext {
		@include blockText;
	}

@mixin thinText {
	letter-spacing: -0.025em;
	font-weight: 200;
}

	.thintext {
		@include thinText;
	}

@mixin circled($diameter: 2.5em) {
    @include borderRadius(50%,50%,50%,50%);
    @include box-sizing(border-box);
    display: inline-block;
    color: white;
    text-align: center;
    background-color: $dark1;
    width: $diameter;
    height: $diameter;
    line-height: 2.5;
    padding: 0;
    margin: 0;
}

	.circled {
		@include circled;

        &[class^="ss-"] {
          line-height: 2.5 * 1.125;
        }

		&.circled-blue {
			background-color: $blue;
		}

		&.circled-green {
			background-color: $green;
		}

		&.circled-white {
			background-color: white;
			color: $dark1;
		}

    &.circled-red {
      background-color: $lightRed;
    }
	}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// Placeholder form text
@mixin input-placeholder {
    &::-webkit-input-placeholder {@content};
    &:-moz-placeholder           {@content};
    &::-moz-placeholder          {@content};
    &:-ms-input-placeholder      {@content};
}


// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  @media (min-width: $screen-xs-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-xs-column-push($columns) {
  @media (min-width: $screen-xs-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-xs-column-pull($columns) {
  @media (min-width: $screen-xs-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns() {
  $list: '';
  $i: 1;
  $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  @for $i from 2 through $grid-columns {
    $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}, #{$list}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


// [converter] Grid converted to use SASS cycles (LESS uses recursive nested mixin defs not supported by SASS)
@mixin make-grid-columns-float($class) {
  $list: '';
  $i: 1;
  $list: ".col-#{$class}-#{$i}";
  @for $i from 2 through $grid-columns {
    $list: ".col-#{$class}-#{$i}, #{$list}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but SASS supports real loops
@mixin make-grid($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid($i, $class, $type);
  }
}

// Transformations
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
      -ms-transform: translate($x, $y); // IE9 only
          transform: translate($x, $y);
}
// Transitions
@mixin transition($transition...) {
  -webkit-transition: $transition;
          transition: $transition;
}
@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
          transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
          transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
          transition-duration: $transition-duration;
}
@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
     -moz-transition: -moz-transform $transition;
       -o-transition: -o-transform $transition;
          transition: transform $transition;
}
// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
// [converter] $parent hack
@mixin responsive-visibility($parent) {
  #{$parent} { display: block !important; }
  table#{$parent}  { display: table; }
  tr#{$parent}     { display: table-row !important; }
  th#{$parent},
  td#{$parent}     { display: table-cell !important; }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
    #{$parent},
  tr#{$parent},
  th#{$parent},
  td#{$parent} { display: none !important; }
}
